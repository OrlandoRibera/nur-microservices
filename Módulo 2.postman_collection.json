{
	"info": {
		"_postman_id": "715c3369-f646-490c-a8c2-93fee9a40548",
		"name": "MÃ³dulo 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "5282012"
	},
	"item": [
		{
			"name": "Create Food Package",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    const response = pm.response.json();\r",
							"    pm.collectionVariables.set(\"foodPackageId\", response.id);\r",
							"});\r",
							"\r",
							"pm.test(\"Status of foodPackage is NEW\", () => {\r",
							"    const status = pm.response.json().status;\r",
							"    pm.expect(status).to.equal(\"NEW\");\r",
							"});\r",
							"\r",
							"pm.test(\"Foods should be empty\", () => {\r",
							"    const foods = pm.response.json().foods.length;\r",
							"    pm.expect(foods).to.equal(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"recipeId\": \"{{$guid}}\",\r\n    \"clientId\": \"{{$guid}}\",\r\n    \"addressId\": \"{{$guid}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/catering/createPackage",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"createPackage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Food In Package",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const foods = pm.response.json().foods;\r",
							"pm.collectionVariables.set(\"foodId\", foods[foods.length - 1].foodId);\r",
							"\r",
							"pm.test(\"Food statush should be Pending\", () => {\r",
							"    const foodStatus = pm.response.json().foods[foods.length - 1].status;\r",
							"    pm.expect(foodStatus).to.eql(\"PENDING\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const foodType = [\"BREAKFAST\", \"LUNCH\", \"DINNER\"];\r",
							"pm.collectionVariables.set(\"foodType\", foodType[Math.floor(Math.random() * foodType.length)]);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"{{$randomProductName}}\",\r\n    \"type\": \"{{foodType}}\",\r\n    \"kcal\": 500.0,\r\n    \"foodPackageId\": \"{{foodPackageId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/catering/createFoodInPackage",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"createFoodInPackage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Food status to cooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate \"newStatus\" from response is \"COOKING\"\r",
							"pm.test(\"Validate status is COOKING\", function () {\r",
							"    pm.expect(pm.response.json().status).to.equal(\"COOKING\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"foodId\": \"{{foodId}}\",\r\n    \"newStatus\": \"COOKING\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/catering/updateFoodStatus",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"updateFoodStatus"
					]
				}
			},
			"response": []
		},
		{
			"name": "Food status to cooked",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate \"newStatus\" from response is \"COOKED\"\r",
							"pm.test(\"Validate status is COOKED\", function () {\r",
							"    pm.expect(pm.response.json().status).to.equal(\"COOKED\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"foodId\": \"{{foodId}}\",\r\n    \"newStatus\": \"COOKED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/catering/updateFoodStatus",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"updateFoodStatus"
					]
				}
			},
			"response": []
		},
		{
			"name": "Pack FoodPackage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate \"newStatus\" from response is \"PACKED\"\r",
							"pm.test(\"Validate status is PACKED\", function () {\r",
							"    pm.expect(pm.response.json().status).to.equal(\"PACKED\");\r",
							"});\r",
							"\r",
							"pm.test(\"Validate each food in Foods is COOKED\", function () {\r",
							"    var responseData = pm.response.json();\r",
							"    pm.expect(responseData.foods).to.be.an('array');\r",
							"    responseData.foods.forEach((food) => {\r",
							"        pm.expect(food.status).to.equal('COOKED');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{foodPackageId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/catering/packFoodPackage",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"packFoodPackage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Dispatch FoodPackage",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Validate \"newStatus\" from response is \"DISPATCHED\"\r",
							"pm.test(\"Validate status is DISPATCHED\", function () {\r",
							"    pm.expect(pm.response.json().status).to.equal(\"DISPATCHED\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"{{foodPackageId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/api/catering/dispatchFoodPackage",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"dispatchFoodPackage"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all packages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response array count is greater than 0\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/api/catering/getAllPackages",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"catering",
						"getAllPackages"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "foodId",
			"value": ""
		},
		{
			"key": "foodPackageId",
			"value": ""
		},
		{
			"key": "foodType",
			"value": ""
		}
	]
}